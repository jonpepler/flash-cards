{"version":3,"sources":["theme.ts","components/Set/List/Item.tsx","components/Set/List.tsx","contexts/Sets.tsx","hooks/useStateWithIdb.ts","components/Test.tsx","utils/shuffleArray.ts","App.tsx","index.tsx"],"names":["mainTextColour","css","props","theme","ItemContainer","styled","div","pNoMargin","p","Title","LearntMeter","Item","item","onSelect","useState","percentageLearnt","setPercentageLearnt","percentageLearntString","useMemo","useEffect","questions","filter","q","learnt","length","onClick","title","id","SetList","ul","List","list","map","set","basicSetList","question","answer","SetsContext","createContext","undefined","SetsProvider","value","children","saving","setSaving","key","initialValue","onSave","setValue","mounted","a","get","newValue","getData","useStateWithIdb","sets","updateSets","Provider","setTestResults","testIndex","findIndex","newSets","useSets","context","useContext","Error","h2","Text","QuestionText","Answer","AnswerCheck","TestReport","AnswerPrompt","button","Test","exit","index","indexQuestions","fixedOrder","arr","array","i","j","Math","floor","random","temp","shuffleArray","setQuestions","filteredQuestions","setFilteredQuestions","allQuestionsAnswered","currentQuestionIndex","setCurrentQuestionIndex","currentQuestion","setCurrentQuestion","showAnswer","setShowAnswer","nextQuestion","find","nullableValue","answered","answerQuestion","slice","setNextQuestion","idsOnly","fq","higherIndex","min","Infinity","App","setDisplayId","updateSetDisplayId","testSet","updateTestSet","newTestSet","className","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+OAMaA,EAAiBC,YAAH,2CAChB,SAACC,GAAD,OAAWA,EAAMC,MAAMH,kB,cCD5BI,EAAgBC,IAAOC,IAAV,2NACG,SAACJ,GAAD,OAAWA,EAAMC,MAAMH,kBAWvCO,EAAYF,IAAOG,EAAV,0CAITC,EAAQJ,YAAOE,EAAPF,CAAH,0BAELK,EAAcL,YAAOE,EAAPF,CAAH,sEAUJM,EAAsB,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SAAe,EACTC,mBAAiB,GADR,mBAClDC,EADkD,KAChCC,EADgC,KAEnDC,EAAyBC,mBAAQ,2BAASH,EAAT,cAAqC,CAC1EA,IAUF,OAPAI,qBAAU,WACRH,EACGJ,EAAKQ,UAAUC,QAAO,SAACC,GAAD,OAAOA,EAAEC,UAAQC,OAASZ,EAAKQ,UAAUI,OAC9D,OAEH,CAACZ,EAAKQ,YAGP,eAAChB,EAAD,CAA6BqB,QAASZ,EAAtC,UACE,cAACJ,EAAD,UAAQG,EAAKc,QACb,cAAChB,EAAD,UAAcO,MAFIL,EAAKe,KCxCvBC,EAAUvB,IAAOwB,GAAV,2CASAC,EAAsB,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMlB,EAAT,EAASA,SAAT,OACjC,cAACe,EAAD,UACGG,EAAKC,KAAI,SAACC,GAAD,OACR,cAAC,EAAD,CAAmBrB,KAAMqB,EAAKpB,SAAU,kBAAMA,EAASoB,EAAIN,MAAhDM,EAAIN,U,8CCffO,EAAsB,CAC1B,CACER,MAAO,aACPC,GAAI,IACJP,UAAW,CACT,CACEe,SAAU,kDACVC,OAAQ,WAEV,CACED,SAAU,4CACVC,OAAQ,WAEV,CACED,SACE,yGACFC,OAAQ,mBAEV,CACED,SAAU,+BACVC,OAAQ,OAEV,CACED,SAAU,yCACVC,OAAQ,iBAEV,CACED,SACE,2EACFC,OAAQ,SAEV,CACED,SAAU,oCACVC,OAAQ,mBAEV,CACED,SAAU,oCACVC,OAAQ,eAEV,CACED,SACE,iEACFC,OAAQ,kBAEV,CACED,SAAU,4DACVC,OAAQ,UAId,CACEV,MAAO,cACPC,GAAI,IACJP,UAAW,CACT,CACEe,SAAU,UACVC,OAAQ,UAgBVC,EAAcC,6BAA2CC,GAClDC,EAAsC,SAAC,GAAyB,IAAD,EAAtBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SAAe,EAC9C5B,oBAAkB,GAD4B,mBACnE6B,EADmE,KAC3DC,EAD2D,OC3E7C,SAC7BC,EACAC,EACAC,GAC4B,IAAD,EACDjC,mBAASgC,GADR,mBACpBL,EADoB,KACbO,EADa,KAkB3B,OAdA7B,qBAAU,WACR,IAAI8B,GAAU,EAQd,OAPa,uCAAG,4BAAAC,EAAA,sEACSC,YAAIN,GADb,YAEGN,KADXa,EADQ,SAEgBH,GAC5BD,EAASI,GAHG,2CAAH,oDAMRC,GACE,WACLJ,GAAU,KAEX,CAACJ,IAEG,CACLJ,EADK,uCAEL,WAAOA,GAAP,SAAAS,EAAA,sEACQjB,YAAIY,EAAKJ,GADjB,OAEEO,EAASP,GACTM,IAHF,2CAFK,uDDuDoBO,CACzB,OADwC,iBAGxCb,QAHwC,IAGxCA,OAHwC,EAGxCA,EAAOc,YAHiC,QAGzBrB,GACf,kBAAMU,GAAU,MANwD,mBAEnEW,EAFmE,KAE7DC,EAF6D,KAiB1E,OACE,cAACnB,EAAYoB,SAAb,CAAsBhB,MAAO,CAAEc,OAAMG,eATmB,SAAC/B,EAAIP,GAC7D,IAAMuC,EAAYJ,EAAKK,WAAU,SAAC3B,GAAD,OAASA,EAAIN,KAAOA,KAC/CkC,EAAO,YAAON,GACpBM,EAAQF,GAAR,2BAA0BE,EAAQF,IAAlC,IAA8CvC,cAC9CwB,GAAU,GACVY,EAAWK,IAI0ClB,UAArD,SACGD,KAIMoB,EAAU,WACrB,IAAMC,EAAUC,qBAAW3B,GAC3B,QAAgBE,IAAZwB,EACF,MAAM,IAAIE,MAAM,8CAElB,OAAOF,GEjGHtD,EAAQJ,IAAO6D,GAAV,kCACPlE,GAGEmE,EAAO9D,IAAOG,EAAV,kCACNR,GAEEoE,EAAeD,EACfE,EAASF,EACTG,EAAcH,EACdI,EAAaJ,EAEbK,EAAenE,IAAOoE,OAAV,0BAcLC,EAAsB,SAAC,GAAmB,IAAD,EAAhBzC,EAAgB,EAAhBA,IAAK0C,EAAW,EAAXA,KAAW,EACjBb,IAA3BJ,EAD4C,EAC5CA,eAAgBf,EAD4B,EAC5BA,OAD4B,EAElB7B,mBALb,SAACM,GAAD,OACrBA,EAAUY,KAAI,SAACV,EAAGsD,GAAJ,mBAAC,eAAmBtD,GAApB,IAAuBK,GAAIiD,OAKvCC,CACE,UAAA5C,EAAI6C,kBAAJ,SAA0B7C,EAAIb,UCvCR,SAAI2D,GAE9B,IADA,IAAMC,EAAK,YAAOD,GACTE,EAAID,EAAMxD,OAAS,EAAGyD,EAAI,EAAGA,IAAK,CACzC,IAAMC,EAAIC,KAAKC,MAAMD,KAAKE,UAAYJ,EAAI,IACpCK,EAAON,EAAMC,GACnBD,EAAMC,GAAKD,EAAME,GACjBF,EAAME,GAAKI,EAEb,OAAON,ED+BuCO,CAAatD,EAAIb,aAJX,mBAE7CA,EAF6C,KAElCoE,EAFkC,OAOF1E,mBAChDM,GARkD,mBAO7CqE,EAP6C,KAO1BC,EAP0B,KAU9CC,EAAuBzE,mBAAQ,kBAAmC,IAA7BuE,EAAkBjE,SAAc,CACzEiE,IAXkD,EAaI3E,mBAAiB,GAbrB,mBAa7C8E,EAb6C,KAavBC,EAbuB,OAcN/E,mBAC5C2E,EAAkBG,IAfgC,mBAc7CE,EAd6C,KAc5BC,EAd4B,OAiBhBjF,oBAAkB,GAjBF,mBAiB7CkF,EAjB6C,KAiBjCC,EAjBiC,KAmBpD9E,qBAAU,WACR,IAAM+E,EAAeT,EAAkBU,MACrC,SAAC7E,GAAD,OAAOA,EAAEK,KAAOiE,KAElBG,EAAmBG,KAClB,CAACN,IAEJzE,qBAAU,WAGRuE,EAAqBtE,EAAUC,QAAO,SAACC,GAAD,QAFvB,QAAC8E,EAEqC9E,EAAE+E,gBAFxC,IACbD,MADa,IAACA,QAGf,CAAChF,IAEJD,qBAAU,WACJwE,GACFjC,EAAezB,EAAIN,GAAIP,KAExB,CAACuE,IAEJ,IAAMW,EAAiB,SAAC/E,GACtB0E,GAAc,GACdT,EAAa,GAAD,mBACPpE,EAAUmF,MAAM,EAAGX,IADZ,aAAC,eAENE,GAFK,IAEYO,UAAU,EAAM9E,YAF5B,YAGPH,EAAUmF,MAAMX,EAAuB,EAAGxE,EAAUI,WAEzDgF,KAGIA,EAAkB,WACtB,IAAMC,EAAU,SAACC,GAAD,OAAiCA,EAAG/E,IAC9CgF,EAAcxB,KAAKyB,IAAL,MAAAzB,KAAI,YACnBM,EACApE,QAAO,SAACqF,GAAD,OAAQA,EAAG/E,GAAKiE,KACvB5D,IAAIyE,KAETZ,EACEc,IAAgBE,IACZ1B,KAAKyB,IAAL,MAAAzB,KAAI,YAAQM,EAAkBzD,IAAIyE,KAClCE,IAIR,OACE,qCACE,wBAAQlF,QAASkD,EAAjB,qBACA,cAAC,EAAD,UAAQ1C,EAAIP,QACViE,EAoBA,eAACpB,EAAD,iCACsB5B,EAAS,YAAc,QApB7C,qCACE,cAACyB,EAAD,UAAe0B,EAAgB3D,WAC9B6D,EACC,qCACE,cAAC3B,EAAD,UAASyB,EAAgB1D,SACzB,cAACkC,EAAD,gCACA,wBAAQ7C,QAAS,kBAAM6E,GAAe,IAAtC,qBACA,wBAAQ7E,QAAS,kBAAM6E,GAAe,IAAtC,0BAGF,qCACE,cAAC9B,EAAD,CAAc/C,QAAS,kBAAMwE,GAAc,IAA3C,yBAGA,wBAAQxE,QAAS+E,EAAjB,iCE9GDM,G,MAAU,WAAO,IACpBvD,EAASO,IAATP,KADmB,EAEgBzC,mBAAwB,MAFxC,mBAEpBiG,EAFoB,KAENC,EAFM,OAGMlG,mBAAqB,MAH3B,mBAGpBmG,EAHoB,KAGXC,EAHW,KAU3B,OALA/F,qBAAU,WACR,IAAMgG,EAAa5D,EAAK4C,MAAK,SAAClE,GAAD,OAASA,EAAIN,KAAOoF,KACjDG,OAA6B3E,IAAf4E,EAA2BA,EAAa,QACrD,CAACJ,IAGF,sBAAKK,UAAU,MAAf,UACE,wBAAQA,UAAU,aAAlB,SACE,+CAEF,+BACe,OAAZH,EACC,cAAC,EAAD,CAASlF,KAAMwB,EAAM1C,SAAU,SAACc,GAAD,OAAQqF,EAAmBrF,MAE1D,cAAC,EAAD,CAAMM,IAAKgF,EAAStC,KAAM,kBAAMqC,EAAmB,gBCjB7DK,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAepH,MRRE,CACnBH,eAAgB,SQOd,SACE,cAAC,EAAD,UACE,cAAC,EAAD,UAINwH,SAASC,eAAe,W","file":"static/js/main.9e86ddef.chunk.js","sourcesContent":["import { css } from 'styled-components'\n\nexport const theme = {\n  mainTextColour: 'white'\n}\n\nexport const mainTextColour = css`\n  color: ${(props) => props.theme.mainTextColour};\n`\n","import { FC, useEffect, useMemo, useState } from 'react'\n\nimport styled from 'styled-components'\n\nimport { Set } from 'types'\n\nconst ItemContainer = styled.div`\n  background-color: ${(props) => props.theme.mainTextColour};\n  padding: 15px;\n  border-radius: 10px;\n  font-weight: bolder;\n  box-shadow: 0px 4px #4c4c4c;\n  cursor: pointer;\n  margin-bottom: 15px;\n\n  max-width: 500px;\n`\n\nconst pNoMargin = styled.p`\n  margin: 0;\n`\n\nconst Title = styled(pNoMargin)``\n\nconst LearntMeter = styled(pNoMargin)`\n  text-align: right;\n  font-size: 12px;\n`\n\nexport interface ItemProps {\n  item: Set\n  onSelect: () => void\n}\n\nexport const Item: FC<ItemProps> = ({ item, onSelect }) => {\n  const [percentageLearnt, setPercentageLearnt] = useState<number>(0)\n  const percentageLearntString = useMemo(() => `${percentageLearnt}% learnt`, [\n    percentageLearnt\n  ])\n\n  useEffect(() => {\n    setPercentageLearnt(\n      (item.questions.filter((q) => q.learnt).length / item.questions.length) *\n        100\n    )\n  }, [item.questions])\n\n  return (\n    <ItemContainer key={item.id} onClick={onSelect}>\n      <Title>{item.title}</Title>\n      <LearntMeter>{percentageLearntString}</LearntMeter>\n    </ItemContainer>\n  )\n}\n","import { FC } from 'react'\n\nimport styled from 'styled-components'\n\nimport { Set } from 'types'\n\nimport { Item } from './List/'\n\nconst SetList = styled.ul`\n  padding: 0;\n`\n\nexport interface ListProps {\n  list: Set[]\n  onSelect: (id: string) => void\n}\n\nexport const List: FC<ListProps> = ({ list, onSelect }) => (\n  <SetList>\n    {list.map((set) => (\n      <Item key={set.id} item={set} onSelect={() => onSelect(set.id)} />\n    ))}\n  </SetList>\n)\n","import { useStateWithIdb } from 'hooks'\nimport { createContext, useContext, FC, useState } from 'react'\nimport { Question, Set } from 'types'\n\n// Shamelessly stolen for dev work from https://github.com/Amalazing/React-Quiz/blob/master/src/Questions/science-questions.json\nconst basicSetList: Set[] = [\n  {\n    title: 'Test Set 1',\n    id: '1',\n    questions: [\n      {\n        question: 'What is the biggest planet in our solar system?',\n        answer: 'Jupiter'\n      },\n      {\n        question: 'The fear of what animal is arachnophobia?',\n        answer: 'Spiders'\n      },\n      {\n        question:\n          'What famous scientist was awarded the 1921 Nobel Prize in Physics for his work on theoretical physics?',\n        answer: 'Albert Einstein'\n      },\n      {\n        question: 'Pure water has a PH of about',\n        answer: '7.0'\n      },\n      {\n        question: 'What is the highest mountian on Earth?',\n        answer: 'Mount Everest'\n      },\n      {\n        question:\n          'What is the name of the long appendage that hangs off an elephants face?',\n        answer: 'Trunk'\n      },\n      {\n        question: 'Where can flamingos NOT be found?',\n        answer: 'Northern Europe'\n      },\n      {\n        question: 'What compound makes plants green?',\n        answer: 'Chlorophyll'\n      },\n      {\n        question:\n          'What is the name of the star closest to earth besides the sun?',\n        answer: 'Alpha Centauri'\n      },\n      {\n        question: 'Molten rock that comes out of a volcano is known as what?',\n        answer: 'Lava'\n      }\n    ]\n  },\n  {\n    title: 'Test Set 2!',\n    id: '2',\n    questions: [\n      {\n        question: 'E=mc^2?',\n        answer: 'yes'\n      }\n    ]\n  }\n]\n\ninterface SetsContextData {\n  sets: Set[]\n  setTestResults: (id: string, questions: Question[]) => void\n  saving: boolean\n}\n\ninterface SetsProviderProps {\n  value?: SetsContextData\n}\n\nconst SetsContext = createContext<SetsContextData | undefined>(undefined)\nexport const SetsProvider: FC<SetsProviderProps> = ({ value, children }) => {\n  const [saving, setSaving] = useState<boolean>(false)\n  const [sets, updateSets] = useStateWithIdb<Set[]>(\n    'sets',\n    // for dev only\n    value?.sets ?? basicSetList,\n    () => setSaving(false)\n  )\n\n  const setTestResults: SetsContextData['setTestResults'] = (id, questions) => {\n    const testIndex = sets.findIndex((set) => set.id === id)\n    const newSets = [...sets]\n    newSets[testIndex] = { ...newSets[testIndex], questions }\n    setSaving(true)\n    updateSets(newSets)\n  }\n\n  return (\n    <SetsContext.Provider value={{ sets, setTestResults, saving }}>\n      {children}\n    </SetsContext.Provider>\n  )\n}\nexport const useSets = (): SetsContextData => {\n  const context = useContext(SetsContext)\n  if (context === undefined) {\n    throw new Error('useSets must be used within a SetsProvider')\n  }\n  return context\n}\n","import React, { useState, useEffect } from 'react'\nimport { get, set } from 'idb-keyval'\n\nexport const useStateWithIdb = <T>(\n  key: IDBValidKey,\n  initialValue: T,\n  onSave: () => void\n): [T, React.Dispatch<T>] => {\n  const [value, setValue] = useState(initialValue)\n\n  // get stored data on first load\n  useEffect(() => {\n    let mounted = true\n    const getData = async (): Promise<void> => {\n      const newValue = await get(key)\n      if (newValue !== undefined && mounted) {\n        setValue(newValue)\n      }\n    }\n    void getData()\n    return () => {\n      mounted = false\n    }\n  }, [key])\n\n  return [\n    value,\n    async (value) => {\n      await set(key, value)\n      setValue(value)\n      onSave()\n    }\n  ]\n}\n","import { FC, useEffect, useMemo, useState } from 'react'\n\nimport styled from 'styled-components'\nimport { mainTextColour } from 'theme'\n\nimport { Set, Question } from 'types'\nimport { shuffleArray } from 'utils'\nimport { useSets } from 'contexts'\n\nconst Title = styled.h2`\n  ${mainTextColour}\n`\n\nconst Text = styled.p`\n  ${mainTextColour}\n`\nconst QuestionText = Text\nconst Answer = Text\nconst AnswerCheck = Text\nconst TestReport = Text\n\nconst AnswerPrompt = styled.button``\n\ninterface TestProps {\n  set: Set\n  exit: () => void\n}\n\ninterface indexedQuestion extends Question {\n  id: number\n}\n\nconst indexQuestions = (questions: Question[]): indexedQuestion[] =>\n  questions.map((q, index) => ({ ...q, id: index }))\n\nexport const Test: FC<TestProps> = ({ set, exit }) => {\n  const { setTestResults, saving } = useSets()\n  const [questions, setQuestions] = useState<indexedQuestion[]>(\n    indexQuestions(\n      set.fixedOrder ?? false ? set.questions : shuffleArray(set.questions)\n    )\n  )\n  const [filteredQuestions, setFilteredQuestions] = useState<indexedQuestion[]>(\n    questions\n  )\n  const allQuestionsAnswered = useMemo(() => filteredQuestions.length === 0, [\n    filteredQuestions\n  ])\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState<number>(0)\n  const [currentQuestion, setCurrentQuestion] = useState<indexedQuestion>(\n    filteredQuestions[currentQuestionIndex]\n  )\n  const [showAnswer, setShowAnswer] = useState<boolean>(false)\n\n  useEffect(() => {\n    const nextQuestion = filteredQuestions.find(\n      (q) => q.id === currentQuestionIndex\n    ) as indexedQuestion // this should never return undefined\n    setCurrentQuestion(nextQuestion)\n  }, [currentQuestionIndex])\n\n  useEffect(() => {\n    const truthy = (nullableValue: boolean | undefined): boolean =>\n      nullableValue ?? false\n    setFilteredQuestions(questions.filter((q) => !truthy(q.answered)))\n  }, [questions])\n\n  useEffect(() => {\n    if (allQuestionsAnswered) {\n      setTestResults(set.id, questions)\n    }\n  }, [allQuestionsAnswered])\n\n  const answerQuestion = (learnt: boolean): void => {\n    setShowAnswer(false)\n    setQuestions([\n      ...questions.slice(0, currentQuestionIndex),\n      { ...currentQuestion, answered: true, learnt },\n      ...questions.slice(currentQuestionIndex + 1, questions.length)\n    ])\n    setNextQuestion()\n  }\n\n  const setNextQuestion = (): void => {\n    const idsOnly = (fq: indexedQuestion): number => fq.id\n    const higherIndex = Math.min(\n      ...filteredQuestions\n        .filter((fq) => fq.id > currentQuestionIndex)\n        .map(idsOnly)\n    )\n    setCurrentQuestionIndex(\n      higherIndex === Infinity\n        ? Math.min(...filteredQuestions.map(idsOnly))\n        : higherIndex\n    )\n  }\n\n  return (\n    <>\n      <button onClick={exit}>Go Back</button>\n      <Title>{set.title}</Title>\n      {!allQuestionsAnswered ? (\n        <>\n          <QuestionText>{currentQuestion.question}</QuestionText>\n          {showAnswer ? (\n            <>\n              <Answer>{currentQuestion.answer}</Answer>\n              <AnswerCheck>Were you correct?</AnswerCheck>\n              <button onClick={() => answerQuestion(true)}>Correct</button>\n              <button onClick={() => answerQuestion(false)}>Incorrect</button>\n            </>\n          ) : (\n            <>\n              <AnswerPrompt onClick={() => setShowAnswer(true)}>\n                Show Answer\n              </AnswerPrompt>\n              <button onClick={setNextQuestion}>Next Card</button>\n            </>\n          )}\n        </>\n      ) : (\n        <TestReport>\n          No more questions! {saving ? 'Saving...' : null}\n        </TestReport>\n      )}\n    </>\n  )\n}\n","export const shuffleArray = <T>(arr: T[]): T[] => {\n  const array = [...arr]\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1))\n    const temp = array[i]\n    array[i] = array[j]\n    array[j] = temp\n  }\n  return array\n}\n","import { SetList, Test } from 'components'\nimport { useSets } from 'contexts'\nimport { FC, useEffect, useState } from 'react'\nimport { Set } from 'types'\nimport './App.css'\n\nexport const App: FC = () => {\n  const { sets } = useSets()\n  const [setDisplayId, updateSetDisplayId] = useState<string | null>(null)\n  const [testSet, updateTestSet] = useState<Set | null>(null)\n\n  useEffect(() => {\n    const newTestSet = sets.find((set) => set.id === setDisplayId)\n    updateTestSet(newTestSet !== undefined ? newTestSet : null)\n  }, [setDisplayId])\n\n  return (\n    <div className=\"app\">\n      <header className=\"app-header\">\n        <h1>Flash Cards</h1>\n      </header>\n      <main>\n        {testSet === null ? (\n          <SetList list={sets} onSelect={(id) => updateSetDisplayId(id)} />\n        ) : (\n          <Test set={testSet} exit={() => updateSetDisplayId(null)}></Test>\n        )}\n      </main>\n    </div>\n  )\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport { theme } from 'theme'\nimport { App } from './App'\nimport { ThemeProvider } from 'styled-components'\nimport { SetsProvider } from 'contexts'\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <SetsProvider>\n        <App />\n      </SetsProvider>\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}